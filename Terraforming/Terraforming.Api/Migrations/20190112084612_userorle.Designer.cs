// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Terraforming.Api.Database;

namespace Terraforming.Api.Migrations
{
    [DbContext(typeof(MsDataContext))]
    [Migration("20190112084612_userorle")]
    partial class userorle
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Terraforming.Api.Models.Game", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("Terraforming.Api.Models.GameScore", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AwardsPlaced");

                    b.Property<int>("AwardsWon");

                    b.Property<int>("Board");

                    b.Property<string>("GameId");

                    b.Property<int>("Milestones");

                    b.Property<int>("Place");

                    b.Property<int>("Points");

                    b.Property<DateTime>("Updated");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GameScore");
                });

            modelBuilder.Entity("Terraforming.Api.Models.Invitation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Created");

                    b.Property<int>("InivtationStatus");

                    b.Property<string>("OwnerId");

                    b.Property<string>("TeamId");

                    b.Property<string>("TeamTitle");

                    b.Property<DateTime>("Updated");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Terraforming.Api.Models.Team", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Icon");

                    b.Property<string>("OwnerId");

                    b.Property<string>("Title");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Terraforming.Api.Models.TeamUser", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("TeamId");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamUsers");
                });

            modelBuilder.Entity("Terraforming.Api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("ExternaLogin");

                    b.Property<string>("Firstname")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Lastname")
                        .IsRequired();

                    b.Property<string>("Nickname");

                    b.Property<string>("PasswordHash");

                    b.Property<DateTime>("Updated");

                    b.Property<int>("UserRole");

                    b.Property<string>("VerificationToken");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Terraforming.Api.Models.GameScore", b =>
                {
                    b.HasOne("Terraforming.Api.Models.Game", "Game")
                        .WithMany("GamePlayers")
                        .HasForeignKey("GameId");

                    b.HasOne("Terraforming.Api.Models.User", "User")
                        .WithMany("GameScores")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Terraforming.Api.Models.Invitation", b =>
                {
                    b.HasOne("Terraforming.Api.Models.User", "Owner")
                        .WithMany("Invites")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Terraforming.Api.Models.Team", "Team")
                        .WithMany("Invitations")
                        .HasForeignKey("TeamId");

                    b.HasOne("Terraforming.Api.Models.User", "User")
                        .WithMany("Invitations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Terraforming.Api.Models.Team", b =>
                {
                    b.HasOne("Terraforming.Api.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("Terraforming.Api.Models.TeamUser", b =>
                {
                    b.HasOne("Terraforming.Api.Models.Team", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Terraforming.Api.Models.User", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
